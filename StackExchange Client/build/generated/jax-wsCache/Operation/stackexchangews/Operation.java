
package stackexchangews;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10-b140803.1500
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Operation", targetNamespace = "http://stackexchangews/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Operation {


    /**
     * 
     * @param password
     * @param name
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "register", targetNamespace = "http://stackexchangews/", className = "stackexchangews.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.RegisterResponse")
    @Action(input = "http://stackexchangews/Operation/registerRequest", output = "http://stackexchangews/Operation/registerResponse")
    public boolean register(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password);

    /**
     * 
     * @param topic
     * @param id
     * @param content
     * @param token
     * @throws ParseException_Exception
     * @throws UnsupportedEncodingException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "editQ", targetNamespace = "http://stackexchangews/", className = "stackexchangews.EditQ")
    @ResponseWrapper(localName = "editQResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.EditQResponse")
    @Action(input = "http://stackexchangews/Operation/editQRequest", output = "http://stackexchangews/Operation/editQResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/editQ/Fault/IOException"),
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/editQ/Fault/UnsupportedEncodingException"),
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/editQ/Fault/MalformedURLException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/editQ/Fault/ParseException")
    })
    public void editQ(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "topic", targetNamespace = "")
        String topic,
        @WebParam(name = "content", targetNamespace = "")
        String content)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

    /**
     * 
     * @param idq
     * @param token
     * @return
     *     returns boolean
     * @throws ParseException_Exception
     * @throws UnsupportedEncodingException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteQ", targetNamespace = "http://stackexchangews/", className = "stackexchangews.DeleteQ")
    @ResponseWrapper(localName = "deleteQResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.DeleteQResponse")
    @Action(input = "http://stackexchangews/Operation/deleteQRequest", output = "http://stackexchangews/Operation/deleteQResponse", fault = {
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/deleteQ/Fault/MalformedURLException"),
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/deleteQ/Fault/IOException"),
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/deleteQ/Fault/UnsupportedEncodingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/deleteQ/Fault/ParseException")
    })
    public boolean deleteQ(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "idq", targetNamespace = "")
        int idq)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

    /**
     * 
     * @param mode
     * @param val
     * @param idq
     * @param token
     * @throws ParseException_Exception
     * @throws UnsupportedEncodingException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "vote", targetNamespace = "http://stackexchangews/", className = "stackexchangews.Vote")
    @ResponseWrapper(localName = "voteResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.VoteResponse")
    @Action(input = "http://stackexchangews/Operation/voteRequest", output = "http://stackexchangews/Operation/voteResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/vote/Fault/IOException"),
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/vote/Fault/UnsupportedEncodingException"),
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/vote/Fault/MalformedURLException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/vote/Fault/ParseException")
    })
    public void vote(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "mode", targetNamespace = "")
        boolean mode,
        @WebParam(name = "idq", targetNamespace = "")
        String idq,
        @WebParam(name = "val", targetNamespace = "")
        int val)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

    /**
     * 
     * @param mode
     * @param idus
     * @param idqa
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "canVote", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CanVote")
    @ResponseWrapper(localName = "canVoteResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CanVoteResponse")
    @Action(input = "http://stackexchangews/Operation/canVoteRequest", output = "http://stackexchangews/Operation/canVoteResponse")
    public boolean canVote(
        @WebParam(name = "idus", targetNamespace = "")
        String idus,
        @WebParam(name = "mode", targetNamespace = "")
        boolean mode,
        @WebParam(name = "idqa", targetNamespace = "")
        String idqa);

    /**
     * 
     * @param ida
     * @param token
     * @return
     *     returns boolean
     * @throws ParseException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteA", targetNamespace = "http://stackexchangews/", className = "stackexchangews.DeleteA")
    @ResponseWrapper(localName = "deleteAResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.DeleteAResponse")
    @Action(input = "http://stackexchangews/Operation/deleteARequest", output = "http://stackexchangews/Operation/deleteAResponse", fault = {
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/deleteA/Fault/MalformedURLException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/deleteA/Fault/ParseException"),
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/deleteA/Fault/IOException")
    })
    public boolean deleteA(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "ida", targetNamespace = "")
        int ida)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns int
     * @throws UnsupportedEncodingException_Exception
     * @throws ParseException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod(operationName = "Auth")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "Auth", targetNamespace = "http://stackexchangews/", className = "stackexchangews.Auth")
    @ResponseWrapper(localName = "AuthResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.AuthResponse")
    @Action(input = "http://stackexchangews/Operation/AuthRequest", output = "http://stackexchangews/Operation/AuthResponse", fault = {
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/Auth/Fault/UnsupportedEncodingException"),
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/Auth/Fault/MalformedURLException"),
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/Auth/Fault/IOException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/Auth/Fault/ParseException")
    })
    public int auth(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

    /**
     * 
     * @param title
     * @param content
     * @param token
     * @return
     *     returns boolean
     * @throws ParseException_Exception
     * @throws UnsupportedEncodingException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createQuestion", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CreateQuestion")
    @ResponseWrapper(localName = "createQuestionResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CreateQuestionResponse")
    @Action(input = "http://stackexchangews/Operation/createQuestionRequest", output = "http://stackexchangews/Operation/createQuestionResponse", fault = {
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/createQuestion/Fault/MalformedURLException"),
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/createQuestion/Fault/IOException"),
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/createQuestion/Fault/UnsupportedEncodingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/createQuestion/Fault/ParseException")
    })
    public boolean createQuestion(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "title", targetNamespace = "")
        String title,
        @WebParam(name = "content", targetNamespace = "")
        String content)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

    /**
     * 
     * @param idq
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "countAnswer", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CountAnswer")
    @ResponseWrapper(localName = "countAnswerResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CountAnswerResponse")
    @Action(input = "http://stackexchangews/Operation/countAnswerRequest", output = "http://stackexchangews/Operation/countAnswerResponse")
    public int countAnswer(
        @WebParam(name = "idq", targetNamespace = "")
        String idq);

    /**
     * 
     * @param id
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserbyID", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUserbyID")
    @ResponseWrapper(localName = "getUserbyIDResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUserbyIDResponse")
    @Action(input = "http://stackexchangews/Operation/getUserbyIDRequest", output = "http://stackexchangews/Operation/getUserbyIDResponse")
    public String getUserbyID(
        @WebParam(name = "id", targetNamespace = "")
        int id);

    /**
     * 
     * @param mode
     * @param id
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "countVote", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CountVote")
    @ResponseWrapper(localName = "countVoteResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CountVoteResponse")
    @Action(input = "http://stackexchangews/Operation/countVoteRequest", output = "http://stackexchangews/Operation/countVoteResponse")
    public int countVote(
        @WebParam(name = "mode", targetNamespace = "")
        boolean mode,
        @WebParam(name = "id", targetNamespace = "")
        String id);

    /**
     * 
     * @param token
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUIDbyToken", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUIDbyToken")
    @ResponseWrapper(localName = "getUIDbyTokenResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUIDbyTokenResponse")
    @Action(input = "http://stackexchangews/Operation/getUIDbyTokenRequest", output = "http://stackexchangews/Operation/getUIDbyTokenResponse")
    public int getUIDbyToken(
        @WebParam(name = "token", targetNamespace = "")
        String token);

    /**
     * 
     * @param token
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserbyToken", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUserbyToken")
    @ResponseWrapper(localName = "getUserbyTokenResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.GetUserbyTokenResponse")
    @Action(input = "http://stackexchangews/Operation/getUserbyTokenRequest", output = "http://stackexchangews/Operation/getUserbyTokenResponse")
    public String getUserbyToken(
        @WebParam(name = "token", targetNamespace = "")
        String token);

    /**
     * 
     * @param idq
     * @param content
     * @param token
     * @return
     *     returns boolean
     * @throws ParseException_Exception
     * @throws UnsupportedEncodingException_Exception
     * @throws MalformedURLException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createAnswer", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CreateAnswer")
    @ResponseWrapper(localName = "createAnswerResponse", targetNamespace = "http://stackexchangews/", className = "stackexchangews.CreateAnswerResponse")
    @Action(input = "http://stackexchangews/Operation/createAnswerRequest", output = "http://stackexchangews/Operation/createAnswerResponse", fault = {
        @FaultAction(className = MalformedURLException_Exception.class, value = "http://stackexchangews/Operation/createAnswer/Fault/MalformedURLException"),
        @FaultAction(className = IOException_Exception.class, value = "http://stackexchangews/Operation/createAnswer/Fault/IOException"),
        @FaultAction(className = UnsupportedEncodingException_Exception.class, value = "http://stackexchangews/Operation/createAnswer/Fault/UnsupportedEncodingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://stackexchangews/Operation/createAnswer/Fault/ParseException")
    })
    public boolean createAnswer(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "idq", targetNamespace = "")
        String idq,
        @WebParam(name = "content", targetNamespace = "")
        String content)
        throws IOException_Exception, MalformedURLException_Exception, ParseException_Exception, UnsupportedEncodingException_Exception
    ;

}
